{
    "name": "@snailicide/root",
    "version": "0.0.1",
    "description": "Snailicide Monorepo",
    "private": true,
    "type": "module",
    "repository": {
        "type": "git",
        "url": "git+https://github.com/gbtunney/snailicide-monorepo.git"
    },
    "license": "MIT",
    "author": {
        "name": "Gillian Tunney",
        "email": "gbtunney@mac.com"
    },
    "scripts": {
        "\n========== COMMIT >> ==========": "",
        "commit": "pnpm run commit:before && pnpm exec git-cz",
        "commit:before": "pnpm build:self && pnpm run lint:staged",
        "commit:build-config": "pnpm nx:build:config && pnpm build:self && pnpm exec git-cz",
        "\n========== BUILD >> ==========": "",
        "build": "pnpm run build:self && pnpm nx:build",
        "build:self": "tsc --build",
        "nx:build": "pnpm exec nx run-many -t build",
        "nx:build:all": "pnpm exec nx run-many --target=build --all",
        "nx:build:config": "pnpm exec nx run @snailicide/build-config:build",
        "\n========== INSPECT >>==========": "",
        "inspect:nx": "pnpm nx:graph",
        "inspect:lint": "pnpm exec eslint  --inspect-config ",
        "inspect:vitest": "pnpm exec vitest --ui",
        "\n========== TEST >>==========": "",
        "test": "pnpm nx:test",
        "nx:test": "pnpm exec nx run-many --target=test",
        "\n========== DOCS >> ==========": "",
        "docs:build": "pnpm run nx:docs",
        "nx:docs": "pnpm exec nx run-many -t docs:build",
        "wip:docs:dev": "pnpm run docs:typedoc && vitepress dev",
        "wip:docs:build": "pnpm run docs:typedoc && vitepress build",
        "wip:docs:preview": "pnpm run docs:typedoc && vitepress preview",
        "wip:docs:typedoc": "pnpm run build && pnpm run build:self && pnpm exec typedoc",
        "\n========== PUBLISH >> ==========": "",
        "pre:release": "pnpm build:self && pnpm run fix && pnpm build && pnpm docs:build",
        "release": "pnpm run pre:release && pnpm changeset",
        "\n========== NX >> ==========": "",
        "nx:graph": "pnpm nx graph",
        "nx:affected": "nx affected --target=build",
        "nx:reset": "pnpm exec nx reset",
        "\n========== LIFECYCLE >> ==========": "",
        "prepare": "husky",
        "lint:staged": "pnpm exec lint-staged --relative --debug",
        "postinstall": "pnpm nx:build:config && pnpm build:self",
        "\n========== CODE STYLE >> ==========": "",
        "prettier": "cross-var prettier {*,**/*}.{ts,js,cts,cjs,mts,mjs,tsx,jsx,sh,html,json,yaml,yml,graphql,md} ./.husky/* --ignore-path ./.gitignore --no-error-on-unmatched-pattern --write",
        "lint": "cross-var eslint -c $npm_package_config_eslint_config",
        "lint:md": "pnpm exec markdownlint-cli2 '{./*,./**/*}.md' '#**/{node_modules,.changeset,docs}/**' '#packages/cli-template/templates/**/*'",
        "\n========== CHECK >> ==========": "",
        "check": "pnpm check:self",
        "check:md": "pnpm run lint:md",
        "check:self": "pnpm lint && pnpm run check:md",
        "\n========== FIX >> ==========": "",
        "fix": "pnpm fix:self",
        "fix:md": "pnpm run lint:md --fix",
        "fix:self": "pnpm prettier --write && pnpm lint --fix && pnpm fix:md",
        "nx:fix": "pnpm exec nx run-many --target=fix --all",
        "\n========== CLEAN >> ==========": "",
        "clean": "pnpm run clean:self && pnpm run clean:pkg",
        "clean:pkg": "echo 'todo: this is a hack' && pnpm clean:self && pnpm -r -f '!@snailicide/bui*' clean && pnpm -r run clean",
        "clean:self": "tsc --build --clean",
        "\n========== UNINSTALL >> ==========": "",
        "uninstall": "pnpm nx:reset && pnpm run clean && pnpm uninstall:list && pnpm run uninstall:rm && pnpm run uninstall:lock",
        "uninstall:list": "find . -name 'node_modules' -type d -prune",
        "uninstall:rm": "find . -name 'node_modules' -type d -prune -exec rm -rf '{}' +",
        "uninstall:lock": "rm -f pnpm-lock.yaml && rm -f packages/**/pnpm-lock.yaml",
        "\n========== WORKFLOW >> ==========": "",
        "workflow:archive": "pnpm install && open /Applications/Docker.app && cross-var pnpm exec gh act --workflows  ./.github/workflows/workflow-build.yml --reuse",
        "registry:start": "pnpm exec verdaccio"
    },
    "devDependencies": {
        "@changesets/cli": "^2.27.7",
        "@commitlint/cli": "^19.3.0",
        "@commitlint/config-conventional": "^19.2.2",
        "@commitlint/cz-commitlint": "^19.2.0",
        "@commitlint/types": "^19.0.3",
        "@eslint/config-inspector": "^1.0.2",
        "@snailicide/build-config": "workspace:^",
        "@types/node": "^22.5.0",
        "@vitest/ui": "^3.1.2",
        "commitizen": "^4.3.0",
        "cross-var": "^1.1.0",
        "eslint": "^9.8.0",
        "git-branch-is": "^4.0.0",
        "husky": "^9.1.5",
        "lint-staged": "^15.2.7",
        "markdownlint-cli2": "^0.17.2",
        "nx": "20.8.1",
        "prettier": "^3.3.3",
        "prettier-plugin-jsdoc": "^1.3.2",
        "prettier-plugin-sh": "^0.17.2",
        "typedoc": "^0.28.3",
        "typedoc-plugin-markdown": "^4.2.6",
        "typedoc-plugin-zod": "^1.2.0",
        "typedoc-vitepress-theme": "^1.0.1",
        "typescript": "^5.5.4",
        "typescript-eslint": "^8.31.0",
        "verdaccio": "^6.1.2",
        "vitepress": "^1.3.4",
        "vitest": "^3.1.2"
    },
    "prettier": "@snailicide/build-config/prettier",
    "config": {
        "eslint": {
            "config": "eslint.config.js"
        },
        "commitizen": {
            "path": "@commitlint/cz-commitlint"
        }
    }
}
